Browser 对象
Window
Navigator
Screen
History
Location

HTML DOM对象
DOM Document
DOM Element
DOM Attribute
DOM Event


navigator                              浏览器对象 
screen                                 屏幕对象 
window                                 窗口对象 
--history                              历史对象 
--location                             地址对象 
--frames[]; Frame                      框架对象 
--document                             文档对象 
----anchors[]; links[]; Link           连接对象 
----applets[]                          Java小程序对象 
----embeds[]                           插件对象 
----forms[]; Form                      表单对象 
--------Button                         按钮对象 
--------Checkbox                       复选框对象 
--------elements[]; Element            表单元素对象 
--------Hidden                         隐藏对象 
--------Password                       密码输入区对象 
--------Radio                          单选域对象 
--------Reset                          重置按钮对象 
--------Select                         选择区（下拉菜单、列表）对象 
------------options[]; Option          选择项对象 
--------Submit                         提交按钮对象 
--------Text                           文本框对象 
--------Textarea                       多行文本输入区对象 
----images[]; Image                    图片对象 



Window 对象属性
属性	                   描述
closed	                 返回窗口是否已被关闭。
defaultStatus	         设置或返回窗口状态栏中的默认文本。
document	         对 Document 对象的只读引用。请参阅 Document 对象。
history	                 对 History 对象的只读引用。请参数 History 对象。
innerheight	         返回窗口的文档显示区的高度。
innerwidth	         返回窗口的文档显示区的宽度。
length	                 设置或返回窗口中的框架数量。
location	         用于窗口或框架的 Location 对象。请参阅 Location 对象。
name	                 设置或返回窗口的名称。
navigator	         对 Navigator 对象的只读引用。请参数 Navigator 对象。
opener	                 返回对创建此窗口的窗口的引用。
outerheight	         返回窗口的外部高度。
outerwidth	         返回窗口的外部宽度。
pageXOffset	         设置或返回当前页面相对于窗口显示区左上角的 X 位置。
pageYOffset	         设置或返回当前页面相对于窗口显示区左上角的 Y 位置。
parent	                 返回父窗口。
screen	                 对 Screen 对象的只读引用。请参数 Screen 对象。
self	                 返回对当前窗口的引用。等价于 Window 属性。
status	                 设置窗口状态栏的文本。
top	                 返回最顶层的先辈窗口。
window	                 window 属性等价于 self 属性，它包含了对窗口自身的引用。
screenLeft、screenTop、screenX、screenY 
只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY。

方法 
alert()                  显示带有一段消息和一个确认按钮的警告框。 
blur()                   把键盘焦点从顶层窗口移开。 
clearInterval()          取消由 setInterval() 设置的 timeout。 
clearTimeout()           取消由 setTimeout() 方法设置的 timeout。 
close()                  关闭浏览器窗口。 
confirm()                显示带有一段消息以及确认按钮和取消按钮的对话框。 
createPopup()            创建一个 pop-up 窗口。 
focus()                  把键盘焦点给予一个窗口。 
moveBy()                 可相对窗口的当前坐标把它移动指定的像素。 
moveTo()                 把窗口的左上角移动到一个指定的坐标。 
open()                   打开一个新的浏览器窗口或查找一个已命名的窗口。 
print()                  打印当前窗口的内容。 
prompt()                 显示可提示用户输入的对话框。 
resizeBy()               按照指定的像素调整窗口的大小。 
resizeTo()               把窗口的大小调整到指定的宽度和高度。 
scrollBy()               按照指定的像素值来滚动内容。 
scrollTo()               把内容滚动到指定的坐标。 
setInterval()            按照指定的周期（以毫秒计）来调用函数或计算表达式。 
setTimeout()             在指定的毫秒数后调用函数或计算表达式。






Window 对象描述 
Window 对象表示一个浏览器窗口或一个框架。在客户端 JavaScript 中，Window 对象是全局对象，所有的表达式都在当前的环境中计算。也就是说，要引用当前窗口根本不需要特殊的语法，可以把那个窗口的属性作为全局变量来使用。例如，可以只写 document，而不必写 window.document。 

同样，可以把当前窗口对象的方法当作函数来使用，如只写 alert()，而不必写 Window.alert()。 

除了上面列出的属性和方法，Window 对象还实现了核心 JavaScript 所定义的所有全局属性和方法。 

Window 对象的 window 属性和 self 属性引用的都是它自己。当你想明确地引用当前窗口，而不仅仅是隐式地引用它时，可以使用这两个属性。除了这两个属性之外，parent 属性、top 属性以及 frame[] 数组都引用了与当前 Window 对象相关的其他 Window 对象。 

要引用窗口中的一个框架，可以使用如下语法： 

frame[i]	//当前窗口的框架  
self.frame[i]	//当前窗口的框架 
w.frame[i]	//窗口 w 的框架 

要引用一个框架的父窗口（或父框架），可以使用下面的语法： 

parent	        //当前窗口的父窗口 
self.parent	//当前窗口的父窗口 
w.parent        //窗口 w 的父窗口 

要从顶层窗口含有的任何一个框架中引用它，可以使用如下语法： 

top	       //当前框架的顶层窗口 
self.top       //当前框架的顶层窗口 
f.top	       //框架 f 的顶层窗口 

新的顶层浏览器窗口由方法 Window.open() 创建。当调用该方法时，应把 open() 调用的返回值存储在一个变量中，然后使用那个变量来引用新窗口。新窗口的 opener 属性反过来引用了打开它的那个窗口。 

一般来说，Window 对象的方法都是对浏览器窗口或框架进行某种操作。而 alert() 方法、confirm() 方法和 prompt 方法则不同，它们通过简单的对话框与用户进行交互。 





HHistory对象简介
History对象包含用户（在浏览器窗口中）访问过的URL。Window对象的history属性就是对一个History对象的引用。出于隐私方面的原因，History对象不再允许脚本访问已经访问过的实际URL，唯一保持使用的功能只有back()、forward()和go()方法。
History对象属性
Length
返回浏览器历史列表的URL数量

History对象方法
back()
加载历史列表中的前一个URL（如果存在）。效果等价于点击后退按钮或者调用history.go(-1)

forward()
加载历史列表中的下一个URL（如果存在）。效果等价于点击前进按钮或者调用history.go(1)

go(num|url)
加载历史列表中的某个具体页面。在chrome，使用url无效！


Location对象简介
Location对象包含有关当前URL的信息。Window对象的location属性就是对Location对象的引用。它的href属性存放的是文档完整的url，其他属性则分别秒射了URL的各个部分。当一个Location对象被转换成字符串，返回的是href属性值。如果把一个含有URL的字符串富裕Location对象或者它的href属性，浏览器就会把新的URL所指的文档加载并显示出来。详细功能参见其属性和方法。
Location对象属性
hash
设置或返回从#开始的URL。

host
设置或返回主机名和当前URL的端口号

hostname
设置或返回当前URL的主机名

href
设置或返回完整的URL。

pathname
设置或返回当前URL的路径部分

port
设置或者返回当前URL的端口号

protocol
设置或者返回当前URL的协议

search
设置或者返回从？开始的URL（查询部分）

Location对象方法
assign(url)
加载一个新的文档。

reload(flag)
如果该方法没有规定参数，或者参数是false，它会用http头从if-modified-since来检测服务器上的文档是否已经改变。如果已经改变，则会再次下载该文档，否则从缓冲中装载文档，，效果与单机浏览器刷新按钮完全一样。若flag为true，总会绕过缓存，从服务器上重新下载该文档，与按住shift和刷新按钮效果完全一样。

replace(url)
该方法不会在history中生成一个新的记录，当使用该方法的时候，新的url将覆盖history中的当前记录。
其他
url="www.hao123.com"和url="http://www.hao123.com"是不一样的，前者是file protocol，后者是http protocol，后者才能访问该网站。location.href=url、location.assign(url)等的测试可以得知。




Navigator对象
Navigator对象包含有关浏览器的信息，所有的浏览器都支持该对象。该对象的属性描述了正在使用的浏览器，可以使用这些属性进行平台专用的配置。该对象在browser里面是唯一的，可以用Window对象的navigator属性来引用它。
Navigator对象属性
plugins
返回文档中所有插件对象的引用的一个数组。

appCodeName
返回浏览器的代码名

appMinorVersion
返回浏览器的次级版本。chrome下为undefined，IE11为0

appName
返回浏览器的名称，只读。chrome和IE11都为Netscape

appVersion
返回浏览器的平台和版本号，只读。

browserLanguage
返回浏览器的语言。chrome：undefined。ie11:zh-CN

cookieEnabled
返回是否启用cookie。适用于chrome和ie11

cpuClass
返回浏览器系统的cpu等级。chrome：undefined。ie11：x86

onLine
返回是否处于脱机模式。适用于chrome和ie11

platform
返回运行浏览器的操作系统平台。适用于chrome和ie11

systemLanguage
返回OS使用的默认语言。chrome：undefined。ie11：适用

userAgent
返回由客户机发送服务器的user-Agent头部的值。适用于chrome和ie11

userLanguage
返回OS的自然语言设置。chrome：undefined。ie11：适用。


框架与多窗口通信
子窗口与父窗口
只有自身和使用window.open方法打开的窗口和才能被JavaScript访问,window.open方法打开的窗口通过window.opener属性来访问父窗口。 而在opener窗口中，可以通过window.open方法的返回值来访问打开的窗口！

框架
window.frames集合：在框架集或包含iframe标签的页面中，frames集合包含了对有框架中窗口的引用
    alert(frames.length);//框架的数目
    alert(frames[0].document.body.innerHTML);//使用下标直接获取对框架中窗口的引用
    //不但可以使用下标，还可以使用frame标签的name属性
    alert(frames["frame1"].document.title);
 

在框架集中还可以使用ID来获取子窗口的引用

    var frame1 =document.getElementById("frame1");//这样只是获取了标签
    var frame1Win = frame1.contentWindow;//frame对象的contentWindow包含了窗口的引用
    //还可以直接获取框架中document的引用
    var frameDoc = frame1.contentDocument;
    alert(frameDoc);//但IE不支持contentDocument属性
 

子窗口访问父窗口——window对象的parent属性
子窗口访问顶层——window对象的top属性




浏览器检测
市场上的浏览器种类多的不计其数，它们的解释引擎各不相同，期待所有浏览器都一致的支持JavaScript,CSS,DOM,那要等到不知什么时候，然而开发者不能干等着那天。历史上已经有不少方法来解决浏览器兼容问题了，主要分为两种：1.userAgent字符串检测，2.对象检测；当然，也不能考虑所有的浏览器，我们需要按照客户需求来，如果可以确信浏览网站的用户都使用或大部分使用IE浏览器，那么你大可放心的使用IE专有的那些丰富的扩展，当然，一旦用户开始转向另一个浏览，那么痛苦的日子便开始了。下面是市场上的主流浏览器列表：

Internet Explorer
Mozilla Firefox
Google Chrome
Opera
Safari
注意，浏览器总是不断更新，我们不但要为多种浏览器作兼容处理，还要对同一浏览器多个版本作兼容处理。比如IE浏览器，其6.0版本和7.0版本都很流行，因为微软IE随着操作系统绑定安装（之前也是同步发行，微软平均每两年推出一款个人桌面，同样IE也每两年更新一次；直到现在，由于火狐的流行，IE工作组才加快IE的更新），所以更新的较慢，6.0版和7.0版有很大差别。

市场上还存在一些其它浏览器，但由于它们都是使用的上面所列浏览器的核心，或与上面浏览器使用了相同的解释引擎，所以无需多作考虑。下面是主流的浏览器解释引擎列表：

Trident
Trident （又称为MSHTML），是微软的窗口操作系统（Windows）搭载的网页浏览器—Internet Explorer的排版引擎的名称，它的第一个版本随着1997年10月Internet Explorer第四版释出，之后不断的加入新的技术并随着新版本的Internet Explorer释出。在未来最新的Internet Explorer第七版中，微软将对Trident排版引擎做了的重大的变动，除了加入新的技术之外，并增加对网页标准的支持。尽管这些变动已经在相当大的程度上落后了其它的排版引擎。使用该引擎的主要浏览器：IE，TheWorld，MiniIE，Maxthon，腾讯TT浏览器。事实上，这些浏览器是直接使用了IE核心，因为其userAgent字符串中返回的信息与IE是一模一样的！

Gecko
壁虎，英文为"Gecko"。Gecko是由Mozilla基金会开发的布局引擎的名字。它原本叫作NGLayout。Gecko的作用是读取诸如HTML、CSS、XUL和JavaScript等的网页内容，并呈现到用户屏幕或打印出来。Gecko已经被许多应用程序所使用，包括若干浏览器，例如Firefox、Mozilla Suite、Camino,Seamonkey等等

Presto
Presto是一个由Opera Software开发的浏览器排版引擎，供Opera 7.0及以上使用。Presto取代了旧版Opera 4至6版本使用的Elektra排版引擎，包括加入动态功能，例如网页或其部分可随着DOM及Script语法的事件而重新排版。Presto在推出后不断有更新版本推出，使不少错误得以修正，以及阅读Javascript效能得以最佳化，并成为速度最快的引擎。

KHTML
是HTML网页排版引擎之一，由KDE所开发。KDE系统自KDE2版起，在档案及网页浏览器使用了KHTML引擎。该引擎以C++编程语言所写，并以LGPL授权，支援大多数网页浏览标准。由于微软的Internet Explorer的占有率相当高，不少以FrontPage制作的网页均包含只有IE才能读取的非标准语法，为了使KHTML引擎可呈现的网页达到最多，部分IE专属的语法也一并支援。目前使用KHTML的浏览器有Safari和Google Chrome。而KHTML也产生了许多衍生品，如：WebKit,WebCore引擎

利用userAgent检测
下面是各大浏览器使用弹窗显示的userAgent字符串

IE浏览器：Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)

火狐浏览器：Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.0.4) Gecko/2008102920 Firefox/3.0.4

Opera浏览器：Opera/9.64 (Windows NT 5.1; U; Edition IBIS; zh-cn) Presto/2.1.1

Safari浏览器：Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/528.16 (KHTML, like Gecko) Version/4.0 Safari/528.16

Google Chrome浏览器：Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.33 Safari/530.5


可以使用下面的代码进行浏览器检测

    var Browser = {
        isIE:navigator.userAgent.indexOf("MSIE")!=-1,
        isFF:navigator.userAgent.indexOf("Firefox")!=-1,
        isOpera:navigator.userAgent.indexOf("Opera")!=-1,
        isSafari:navigator.userAgent.indexOf("Safari")!=-1
    };
 

但这样做并不是万无一失的，一个特例便是Opera可以使用userAgent伪装自己。下面是伪装成IE的userAgent：Mozilla/5.0 (Windows NT 5.1; U; Edition IBIS; zh-cn; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.64；在完全伪装的情况下，最后的“Opera 9.64”这个字符串也不会出现，但Opera也有特殊的识别自身的方法，它会自动声明一个opera全局变量！

不但如此，我们的检测还忽略了一点，就是那些使用相同引擎而品牌不同的浏览器，所以，直接检测浏览器是没有必要的，检测浏览器的解释引擎才是有必要的！

    var Browser = {
        isIE:navigator.userAgent.indexOf("MSIE")>-1 && !window.opera,
        isGecko:navigator.userAgent.indexOf("Gecko")>-1 && !window.opera 
        && navigator.userAgent.indexOf("KHTML") ==-1,
        isKHTML:navigator.userAgent.indexOf("KHTML")>-1,
        isOpera:navigator.userAgent.indexOf("Opera")>-1
    };





Document对象集合
all[]	       提供对文档中所有 HTML 元素的访问。
anchors[]      返回对文档中所有 Anchor 对象的引用。
applets	       返回对文档中所有 Applet 对象的引用。
forms[]	       返回对文档中所有 Form 对象引用。
images[]       返回对文档中所有 Image 对象引用。
links[]	       返回对文档中所有 Area 和 Link 对象引用。
styleSheets[]  返回文档中所有引入的样式表的集合
scripts[]      返回文档中所有的<script>标签的集合



对象属性
document.title              //设置文档标题等价于HTML的title标签
document.bgColor            //设置页面背景色
document.fgColor            //设置前景色(文本颜色)
document.linkColor          //未点击过的链接颜色
document.alinkColor         //激活链接(焦点在此链接上)的颜色
document.vlinkColor         //已点击过的链接颜色
document.URL                //设置URL属性从而在同一窗口打开另一网页
document.fileCreatedDate    //文件建立日期，只读属性
document.fileModifiedDate   //文件修改日期，只读属性
document.fileSize           //文件大小，只读属性
document.cookie             //设置和读出cookie
document.charset            //设置字符集 简体中文:gb2312
———————————————————————
常用对象方法
document.write()                 //动态向页面写入内容
document.createElement(Tag)      //创建一个html标签对象
document.getElementById(ID)      //获得指定ID值的对象
document.getElementsByName(Name) //获得指定Name值的对象
document.body.appendChild(oTag)
———————————————————————


body-主体子对象
document.body                   //指定文档主体的开始和结束等价于body>/body>
document.body.bgColor           //设置或获取对象后面的背景颜色
document.body.link              //未点击过的链接颜色
document.body.alink             //激活链接(焦点在此链接上)的颜色
document.body.vlink             //已点击过的链接颜色
document.body.text              //文本色
document.body.innerText         //设置body>…/body>之间的文本
document.body.innerHTML         //设置body>…/body>之间的HTML代码
document.body.topMargin         //页面上边距
document.body.leftMargin        //页面左边距
document.body.rightMargin       //页面右边距
document.body.bottomMargin      //页面下边距
document.body.background        //背景图片

常用对象事件
document.body.onclick=”func()” //鼠标指针单击对象是触发
document.body.onmouseover=”func()” //鼠标指针移到对象时触发
document.body.onmouseout=”func()” //鼠标指针移出对象时触发
———————————————————————
location-位置子对象

document.location.hash         // #号后的部分
document.location.host         // 域名+端口号
document.location.hostname     // 域名
document.location.href         // 完整URL
document.location.pathname     // 目录部分
document.location.port         // 端口号
document.location.protocol     // 网络协议(http:)
document.location.search       // ?号后的部分
documeny.location.reload()     //刷新网页
document.location.reload(URL)  //打开新的网页
document.location.assign(URL)  //打开新的网页
document.location.replace(URL) //打开新的网页

———————————————————————
selection-选区子对象
document.selection
———————————————————————

images集合(页面中的图象)

a)通过集合引用
document.images //对应页面上的img标签
document.images.length //对应页面上img标签的个数
document.images[0] //第1个img标签
document.images[i] //第i-1个img标签

b)通过nane属性直接引用
img name=”oImage”
document.images.oImage //document.images.name属性

c)引用图片的src属性
document.images.oImage.src //document.images.name属性.src

d)创建一个图象
var oImage
oImage = new Image()
document.images.oImage.src=”1.jpg”
同时在页面上建立一个img /标签与之对应就可以显示

———————————————————————-

forms集合(页面中的表单)

a)通过集合引用
document.forms                 //对应页面上的form标签
document.forms.length          //对应页面上/formform标签的个数
document.forms[0]              //第1个/form标签
document.forms[i]              //第i-1个/form标签
document.forms[i].length       //第i-1个/form中的控件数
document.forms[i].elements[j]  //第i-1个/form中第j-1个控件

b)通过标签name属性直接引用
/formform name=”Myform”>input name=”myctrl”/>/form
document.Myform.myctrl //document.表单名.控件名

c)访问表单的属性
document.forms[i].name      //对应form name>属性
document.forms[i].action    //对应/formform action>属性
document.forms[i].encoding  //对应/formform enctype>属性
document.forms[i].target    //对应/formform target>属性
   
/*document.all表示document中所有对象的集合,只有ie支持此属性，因此也用来判断浏览器的种类*/

图层对象的4个属性
document.getElementById(”ID”).innerText //动态输出文本
document.getElementById(”ID”).innerHTML //动态输出HTML
document.getElementById(”ID”).outerText //同innerText
document.getElementById(”ID”).outerHTML //同innerHTML


什么是DOM，DOM其实就是把一个HTML或者XML等符合W3C标准的文档内容模拟成一个JAVA对象，这样才能给JAVA或者JS来操作。
 
下面是JS中模拟出的内置DOM对象document的属性和方法 （同样，JAVA中也有对应的DOM类，并且更强大） 


属性：childNodes      //返回所有子元素的数组  




          
 








属性：fristChild     //第一个下级元素
  
属性：lastChild      //最后一个下级元素
  
属性：nextSibling     //下一个元素
  
属性：previousSibling //上一个元素
  
属性：nodeValue       //指定元素的读写属性
  
属性：parentNode     //返回元素的父节点

注释：Internet Explorer 会忽略节点之间生成的空白文本节点（比如换行字符），而 Mozilla 不这么做。因此，在下面的例子中，我们用一个函数来检测上一个同级节点的节点类型。
元素节点的节点类型是 1，因此假如上一个同级节点不是元素节点，则移动到上一个节点，并检测该节点是否是元素节点。这个过程一直持续到找到上一个同级节点为止。这种方法可以确保在 Internet Explorer 和 Mozilla 都获得正确的结果。
如需更多有关 IE 与 Mozilla 浏览器差异的内容，请访问 W3School 的 XML DOM 教程中的 DOM 浏览器 这一节。


function get_previoussibling(n)
{
var x=n.previousSibling;
while (x.nodeType!=1)
  {
  x=x.previousSibling;
  }
return x;
} 


一.直接引用结点
1.document.getElementById(id);
      --在文档里面通过id来找结点

2.document.getElementByTagName(tagName);
      --返回一个数组，包含对这些结点的引用
      --如：document.getElementByTagName("span");将返回所有类型为span的结点

二.间接引用结点
3.element.childNodes
      --返回element的所有子结点,可以用element.childNodes[i]的方式来调用
      --element.firstChild=element.childNodes[0];
      --element.lastChild=element.childNodes[element.childNonts.length-1];

4.element.parentNode
      --引用父结点

5.element.nextSibling;   //引用下一个兄弟结点
   element.previousSibling;  //引用上一个兄弟结点

三.获得结点信息
6.nodeName属性获得结点名称
      --对于元素结点返回的是标记名称,如：<a herf><a>返回的是"a"
      --对于属性结点返回的是属性名称,如：class="test" 返回的是test
      --对于文本结点返回的是文本的内容

7.nodeType返回结点的类型
      --元素结点返回1
      --属性结点返回2
      --文本结点返回3

8.nodeValue返回结点的值
      --元素结点返回null
      --属性结点返回undefined
      --文本结点返回文本内容

9.hasChildNodes()判断是否有子结点

10.tagName属性返回元素的标记名称
      --这个属性只有元素结点才有，等同于元素结点的nodeName属性

四.处理属性结点

11.每个属性结点都是元素结点的一个属性，可以通过(元素结点.属性名称)访问

12.利用setAttribute()方法给元素结点添加属性
      --elementNode.setAttribute(属性名,属性值);
     

13.使用getAttribute()方法获得属性值
      --elementNode.getAttribute(属性名);

五.处理文本结点
14.innerHTML和innerText属性，这两个方法相信大家都很熟悉,不介绍了,值得注意的是无论是ie还是firefox都容易把空格、换行、制表符等当成文本结点。所有一般通过element.childNodes[i]引用文本结点的时候，一般要处理：
      <script language"javaScript" type="text/javascript">
         function cleanWhitespace(element)
         {
            for(var i=0; i<element.childNotes.length; i++)
            {
               var node = element.childNodes[i];
               if(node.nodeType == 3 && !/\S/.test(node.nodeValue))
               {
                  node.parentNode.removeChild(node);
               }
            }
         }
      </script>

六.改变文档的层次结构
15.document.createElement()方法创建元素结点
      --如：document.createElement("Span");

16.document.createTextNode()方法创建文本结点
      --如：document.createTextNode("&nbsp;"); //注:他不会通过html编码，也就是说这里创建的不是空格，而是字符串&nbsp;

17.使用appendChild()方法添加结点
      --parentElement.appendChild(childElement);

18.使用insertBefore()方法插入子节点
      --parentNode.insertBefore(newNode,referenceNode);
      --newNode为插入的节点，referenceNode为将插入的节点插入到这之前

19.使用replaceChild()方法取代子结点
      --parentNode.replaceChild(newNode,oldNode);
      --注：oldNode必须是parentNode的子结点,
20.使用cloneNode()方法复制结点
      --node.cloneNode(includeChildren);
      --includeChildren为bool，表示是否复制其子结点

21.使用removeChild()方法删除子结点
      --parentNode.removeChild(childNode);

七.表格的操作
      --注：ie中无法直接将一个完整的表格结点插入到文档中
22.添加行和单元格
      var _table=document.createElement("table");   //创建表
      table.insertRow(i);                  //在table的第i行插入行
      row.insertCell(i);                     //在row的第i个位置插入单元格

23.引用单元格对象
      --table.rows[i].cells[i];

24.删除行和单元格
      --table.deleteRow(index);
      --row.deleteCell(index);

25.交换两行获得两个单元格的位置
      node1.swapNode(node2);
      --这个方法在firefox中将出错
      通用方法：
      function swapNode(node1,node2)
      {
         var _parent=node1.parentNode;
         var _t1=node1.nextSubling;
         var _t2=node2.nextSubling;
         if(_t1)parent.insertBefore(node2,_t1);
         else _parent.appendChild(node2);         
         if(_t2)parent.insertBefore(node1,_t2);
         else _parent.appendChild(node1);
       } 





HTML DOM Element 对象
HTML DOM 节点
在 HTML DOM （文档对象模型）中，每个部分都是节点：
文档本身是文档节点
所有 HTML 元素是元素节点
所有 HTML 属性是属性节点
HTML 元素内的文本是文本节点
注释是注释节点

Element 对象
在 HTML DOM 中，Element 对象表示 HTML 元素。
Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点。
NodeList 对象表示节点列表，比如 HTML 元素的子节点集合。
元素也可以拥有属性。属性是属性节点（参见下一节）。
浏览器支持
IE    Firefox  Chrome  Safari  Opera
所有浏览器都支持 Element 对象和 NodeList 对象。

属性和方法
下面的属性和方法可用于所有 HTML 元素上：
属性	                                描述
element.accessKey	                设置或返回元素的快捷键。
element.attributes	                返回元素属性的 NamedNodeMap。
element.childNodes	                返回元素子节点的 NodeList。
element.className	                设置或返回元素的 class 属性。
element.clientHeight	                返回元素的可见高度。大部分浏览器对 clientHeight 都没有什么异议，都认为是内容可视区域的高度，也就是说页面浏览器中可以看到内容的这个区域的高度，即然是指可看到内容的区域，滚动条不算在内。但要注意padding是算在内。其计算方式为clientHeight = topPadding + bottomPadding+ height - scrollbar.height。

element.clientWidth	                返回元素的可见宽度。
element.contentEditable			设置或返回元素的文本方向。
element.dir	                	设置或返回元素的文本方向。
element.firstChild	                返回元素的首个子。
element.id	                	设置或返回元素的 id。
element.innerHTML	                设置或返回元素的内容。
element.isContentEditable		设置或返回元素的内容。
element.lang	                	设置或返回元素的语言代码。
element.lastChild	                返回元素的最后一个子元素。
element.namespaceURI	返回元素的 namespace URI。
element.nextSibling	                返回位于相同节点树层级的下一个节点。
element.nodeName	                返回元素的名称。
element.nodeType	                返回元素的节点类型。
element.nodeValue	                设置或返回元素值。
element.offsetHeight	返回元素的高度。在IE6，IE7，IE8以及最新的的FF, Chrome中，在元素上都是offsetHeight = clientHeight + 滚动条 + 边框。
element.offsetWidth	                返回元素的宽度。
element.offsetLeft	                返回元素的水平偏移位置。
element.offsetParent	返回元素的偏移容器。
element.offsetTop	                返回元素的垂直偏移位置。
element.ownerDocument	返回元素的根元素（文档对象）。
element.parentNode	                返回元素的父节点。
element.previousSibling	返回位于相同节点树层级的前一个元素。
element.scrollHeight	                返回元素的整体高度。scrollHeight是元素的padding加元素内容的高度。这个高度与滚动条无关，是内容的实际高度。计算方式 ：scrollHeight = topPadding + bottomPadding + 内容margix box的高度。
element.scrollLeft	                返回元素左边缘与视图之间的距离。
element.scrollTop	                返回元素上边缘与视图之间的距离。
element.scrollWidth	                返回元素的整体宽度。
element.style	                设置或返回元素的 style 属性。
element.tabIndex	                设置或返回元素的 tab 键控制次序。
element.tagName	                返回元素的标签名。
element.textContent	                设置或返回节点及其后代的文本内容。
element.title	                设置或返回元素的 title 属性。
nodelist.length	                返回 NodeList 中的节点数。

方法
element.appendChild()	                向元素添加新的子节点，作为最后一个子节点。
element.insertBefore()	                在指定的已有的子节点之前插入新节点。
element.cloneNode()	                                克隆元素。
element.compareDocumentPosition()	比较两个元素的文档位置。
element.getAttribute()	                返回元素节点的指定属性值。
element.getAttributeNode()	                返回指定的属性节点。
element.getElementsByTagName()	返回拥有指定标签名的所有子元素的集合。
element.getFeature()	                                返回实现了指定特性的 API 的某个对象。
element.getUserData()	                返回关联元素上键的对象。
element.hasAttribute()	                如果元素拥有指定属性，则返回true，否则返回 false。
element.hasAttributes()	                如果元素拥有属性，则返回 true，否则返回 false。
element.hasChildNodes()	                如果元素拥有子节点(包括文本)，则返回 true，否则 false。
element.isDefaultNamespace()	                如果指定的 namespaceURI 是默认的，则返回 true，否则返回 false。
element.isEqualNode()	                检查两个元素是否相等。
element.isSameNode()	                检查两个元素是否是相同的节点。
element.isSupported()	                如果元素支持指定特性，则返回 true。
element.normalize()	                                合并元素中相邻的文本节点，并移除空的文本节点。
element.removeAttribute()	                从元素中移除指定属性。
element.removeAttributeNode()	移除指定的属性节点，并返回被移除的节点。
element.removeChild()	                从元素中移除子节点。
element.replaceChild()	                替换元素中的子节点。
element.setAttribute()	                把指定属性设置或更改为指定值。
element.setAttributeNode()	                设置或更改指定属性节点。
element.setUserData()	                把对象关联到元素上的键。
element.toString()	                               把元素转换为字符串。
nodelist.item()	                               返回 NodeList 中位于指定下标的节点。
